
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String    @db.LongText
  email         String
  emailVerified Boolean @default(false)
  role  Role    @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sessions      Session[]
  accounts      Account[]
  threads Thread[]
  posts Post[]
  bookmarks Bookmark[]
  likes Like[]

  @@unique([email])
  @@map("user")
}
enum Role {
  USER
  ADMIN
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  userAgent String?  @db.LongText
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.LongText
  providerId            String    @db.LongText
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  password              String?   @db.LongText
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  threads     Thread[]
}

model Thread {
  id          String    @id @default(cuid())
  title       String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  posts       Post[]
  bookmarks Bookmark[]
  createdAt   DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  content   String @db.LongText
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  createdAt DateTime @default(now())
  likes Like[]
}

model Bookmark {

 id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  @@unique([userId, threadId])
}

model Like {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String

  @@unique([userId, postId])
}

